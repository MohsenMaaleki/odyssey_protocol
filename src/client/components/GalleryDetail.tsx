import { useState } from 'react';
import type { GalleryEntry } from '../../shared/types/gallery';

interface GalleryDetailProps {
  entry: GalleryEntry;
  onClose: () => void;
  onDelete?: (id: string) => void;
  isModerator: boolean;
}

const getOutcomeEmoji = (outcome: string): string => {
  switch (outcome) {
    case 'success':
      return '‚úÖ';
    case 'fail':
      return '‚ùå';
    case 'abort':
      return 'üü•';
    default:
      return '‚ùì';
  }
};

const formatDate = (isoString: string): string => {
  const date = new Date(isoString);
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  });
};

export const GalleryDetail = ({ entry, onClose, onDelete, isModerator }: GalleryDetailProps) => {
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [imageError, setImageError] = useState(false);

  const handleDelete = () => {
    if (onDelete) {
      onDelete(entry.id);
      setShowDeleteConfirm(false);
    }
  };

  return (
    <div className="space-y-6 max-w-4xl mx-auto">
      {/* Header */}
      <div className="flex items-center justify-between">
        <h2 className="text-3xl font-bold text-gray-900">Mission Details</h2>
        <button
          onClick={onClose}
          className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors"
        >
          ‚Üê Back to Gallery
        </button>
      </div>

      {/* Image */}
      <div className="flex justify-center bg-gray-100 rounded-lg p-4">
        {entry.image_url && !imageError ? (
          <img
            src={entry.image_url}
            alt={entry.title}
            className="max-w-full max-h-[600px] w-auto h-auto object-contain rounded-lg"
            style={{ maxWidth: '800px' }}
            onError={() => setImageError(true)}
          />
        ) : (
          <div className="flex flex-col items-center justify-center py-20 text-gray-400">
            <div className="text-6xl mb-4">üñºÔ∏è</div>
            <div className="text-lg">Image unavailable</div>
          </div>
        )}
      </div>

      {/* Mission Info */}
      <div className="bg-white border-2 border-gray-200 rounded-lg p-6 space-y-4">
        <div className="flex items-start justify-between">
          <div className="space-y-2 flex-1">
            <div className="text-sm text-gray-500 font-mono">{entry.mission_id}</div>
            <h3 className="text-2xl font-bold text-gray-900">{entry.title}</h3>
            <p className="text-lg text-gray-600">{entry.subtitle}</p>
          </div>
          <div className="text-5xl ml-4">{getOutcomeEmoji(entry.outcome)}</div>
        </div>

        {/* Stats */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 pt-4 border-t border-gray-200">
          <div className="text-center">
            <div className="text-sm text-gray-500 mb-1">Fuel</div>
            <div className="text-2xl font-bold text-gray-900">{entry.stats.fuel_end}%</div>
          </div>
          <div className="text-center">
            <div className="text-sm text-gray-500 mb-1">Hull</div>
            <div className="text-2xl font-bold text-gray-900">{entry.stats.hull_end}%</div>
          </div>
          <div className="text-center">
            <div className="text-sm text-gray-500 mb-1">Crew Morale</div>
            <div className="text-2xl font-bold text-gray-900">{entry.stats.crew_morale_end}%</div>
          </div>
        </div>

        {/* Science Points */}
        <div className="pt-4 border-t border-gray-200">
          <div className="flex items-center justify-center gap-2 text-xl">
            <span>üß™</span>
            <span className="font-bold text-gray-900">{entry.science_points}</span>
            <span className="text-gray-600">Science Points Earned</span>
          </div>
        </div>

        {/* Metadata */}
        <div className="pt-4 border-t border-gray-200 text-sm text-gray-500 space-y-1">
          <div>Created: {formatDate(entry.created_at)}</div>
          <div>Author: {entry.credits.author}</div>
          <div>Generated by: {entry.credits.generated_by}</div>
        </div>
      </div>

      {/* Delete Button (Moderators Only) */}
      {isModerator && (
        <div className="flex justify-center">
          {!showDeleteConfirm ? (
            <button
              onClick={() => setShowDeleteConfirm(true)}
              className="px-6 py-3 bg-red-600 text-white font-semibold rounded-lg hover:bg-red-700 transition-colors"
            >
              Delete Entry
            </button>
          ) : (
            <div className="flex items-center gap-4 bg-red-50 border-2 border-red-200 rounded-lg p-4">
              <span className="text-red-700 font-medium">Are you sure?</span>
              <button
                onClick={handleDelete}
                className="px-4 py-2 bg-red-600 text-white font-semibold rounded-lg hover:bg-red-700 transition-colors"
              >
                Yes, Delete
              </button>
              <button
                onClick={() => setShowDeleteConfirm(false)}
                className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors"
              >
                Cancel
              </button>
            </div>
          )}
        </div>
      )}
    </div>
  );
};
